programm = (statement)*

statement = (labeled-statement | block-statement | declaration-statement 
            | selection-statement | iteration-statement | jump-statement |
            | expression | try-statement) [";"]

labeled-statement = label statement

block-statement = ("\t" (statement)*)* | "{" (statement)* "}"

declaration-statement = type identifier ["=" expression] [";"] | function-declaration
                        | class-declaration

selection-statement = if-statement | switch-statement

iteration-statement = while-loop | do-while-loop | for-loop

jump-statement = "break" | "continue" | "return" [expression] | "goto" label

expression = assignment-expression | increment-decrement | arithmetic-expression
            | logical-expression | comparison-expression | member-access | other-expressions

try-statement = "try" statement "catch" (expression | "(" expression ")" ) statement

label = identifier ":" | "case" constexpr ":" | "default" ":"

type = ["unsigned"] ( "int" | "bool" | "char" | "float" | "double" | identifier) ("*" | "&")*

identifier = letter | identifier letter | identifier digit

function-declaration = type identifier [ "(" paramters ")" | paramters ] [block-statement | ";"]

class-declaration = "class" Identifier [":" [access-specifiers] Identifier] class-body

if-statement = "if" ( expression | "(" expression ")" ) statement [ "else" statement ]

switch-statement = "switch" ( expression | "(" expression ")" ) block-statement

while-loop = "while" ( expression | "(" expression ")" )  statement

do-while-loop = "do" statement "while" (expression  | "(" expression ")" )

for-loop = "for" ( "(" (statement | ";" ) expression ";" expression ")" | (statement | ";") expression ";" expression ) statement

assignment-expression = expression assignment-operator expression

increment-decrement = expression "++" | expression "--" | "++" expression | "--" expression

arithmetic-expression = "+" expression | "-" expression | expression arithmetic-operator expression

logical-expression = ( "!" | "not" ) expression | expression ("&&" | "and" | "||" | "or" ) expression

comparison-expression = expression ( "==" | "!=" | "<" | ">" | "<=" ">=" | "<=>" ) expression

member-access = expression "[" expression "]" | "*" expression | "&" expression | expression "." expression
                     | expression "->" expression | expression ".*" expression | expression "->*" expression

other-expressions = function-call | comma-expression | conditional-operator

constexpr = "constexpr" expression | char | string | number

letter = "A" | "B" | "C" | "D" | "E" | "F" | "G"
       | "H" | "I" | "J" | "K" | "L" | "M" | "N"
       | "O" | "P" | "Q" | "R" | "S" | "T" | "U"
       | "V" | "W" | "X" | "Y" | "Z" | "a" | "b"
       | "c" | "d" | "e" | "f" | "g" | "h" | "i"
       | "j" | "k" | "l" | "m" | "n" | "o" | "p"
       | "q" | "r" | "s" | "t" | "u" | "v" | "w"
       | "x" | "y" | "z"

digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

paramters = type identifier [= ( number | string | char | "NULL" )] ["," paramters]

access-specifiers = "private" | "public" | "protected"

class-body = ("\t" (class-member)*)* | "{" (class-member)* "}"

class-member = constructor | destructor | access-specifiers ":" | function-declaration

assignment-operator = "=" | "+=" | "-" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>="

arithmetic-operator = "+" | "-" | "*" | "/" | "%" | "~" | "&" | "|" | "^" | "<<" | ">>"

function-call = expression [ "(" expression ")" | expression ] | expression "'" expression expression

comma-expression = expression [ "," expression ]

conditional-operator = expression "?" expression ":" expression

number = digits | digits "." [digits]

string = '"' (ascii-character)* '"' | "f" '"' (ascii-character)* '"'

char = "'" ascii-character "'"

digits = (digit)+

ascii-character = 1...255 


